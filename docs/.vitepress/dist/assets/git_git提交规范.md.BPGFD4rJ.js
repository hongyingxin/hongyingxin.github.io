import{_ as i,c as a,aE as t,o as n}from"./chunks/framework.jiGApQmY.js";const r=JSON.parse('{"title":"Git 规范提交记录","description":"","frontmatter":{"tag":["未完成"]},"headers":[],"relativePath":"git/git提交规范.md","filePath":"git/git提交规范.md"}'),e={name:"git/git提交规范.md"};function l(p,s,h,o,k,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="git-规范提交记录" tabindex="-1">Git 规范提交记录 <a class="header-anchor" href="#git-规范提交记录" aria-label="Permalink to &quot;Git 规范提交记录&quot;">​</a></h1><p>在团队协作中，保持一致的提交记录格式有助于提高代码库的可读性和可维护性。Husky、Commitlint 和 Commitizen 是三个强大的工具，可以帮助我们在提交代码时自动检查和生成符合规范的提交信息。</p><h2 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h2><p>Husky 是一个 Git 钩子工具，它允许我们在特定的 Git 操作（如 commit、push 等）之前或之后执行自定义脚本。通过 Husky，我们可以在提交代码之前自动运行代码检查、测试等任务。</p><h3 id="安装和配置-husky" tabindex="-1">安装和配置 Husky <a class="header-anchor" href="#安装和配置-husky" aria-label="Permalink to &quot;安装和配置 Husky&quot;">​</a></h3><ol><li><p><strong>安装 Husky</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div></li><li><p><strong>在 <code>package.json</code> 中添加 Husky 配置</strong>：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;prepare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;husky install&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>prepare脚本会在 npm install 之后自动执行，依旧是说在安装完依赖后会执行husky install 命令，该命令会创建.husky目录，并添加husky的配置文件。</p></li><li><p><strong>设置 Husky 钩子</strong>：</p><p>在项目根目录下创建一个 <code>.husky</code> 目录，并在其中添加钩子脚本。例如，添加 <code>commit-msg</code> 钩子：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> husky</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .husky/commit-msg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;npx --no-install commitlint --edit &quot;$1&quot;&#39;</span></span></code></pre></div><p>这样可以确保在安装依赖时自动设置 Husky 钩子。</p></li></ol><h2 id="commitlint" tabindex="-1">Commitlint <a class="header-anchor" href="#commitlint" aria-label="Permalink to &quot;Commitlint&quot;">​</a></h2><p>Commitlint 是一个用于检查提交信息是否符合特定格式的工具。它通常与 Husky 一起使用，以确保每次提交的消息都符合预定义的规范。</p><h3 id="安装和配置-commitlint" tabindex="-1">安装和配置 Commitlint <a class="header-anchor" href="#安装和配置-commitlint" aria-label="Permalink to &quot;安装和配置 Commitlint&quot;">​</a></h3><ol><li><p><strong>安装 Commitlint 及其配置</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @commitlint/{config-conventional,cli}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div></li><li><p><strong>配置 Commitlint</strong>：</p><p>在项目根目录下创建一个 <code>commitlint.config.js</code> 文件，并添加以下内容：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  extends: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@commitlint/config-conventional&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div></li></ol><h2 id="commitizen" tabindex="-1">Commitizen <a class="header-anchor" href="#commitizen" aria-label="Permalink to &quot;Commitizen&quot;">​</a></h2><p>Commitizen 是一个帮助开发者编写符合规范的提交信息的工具。它提供了一个交互式的命令行界面，指导用户逐步填写提交信息。</p><h3 id="安装和配置-commitizen" tabindex="-1">安装和配置 Commitizen <a class="header-anchor" href="#安装和配置-commitizen" aria-label="Permalink to &quot;安装和配置 Commitizen&quot;">​</a></h3><ol><li><p><strong>安装 Commitizen</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commitizen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div></li><li><p><strong>安装适配器</strong>：</p><p>以 <code>cz-conventional-changelog</code> 为例，这是一个常用的适配器，符合 Conventional Commits 规范：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz-conventional-changelog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span></span></code></pre></div></li><li><p><strong>配置 Commitizen</strong>：</p><p>在 <code>package.json</code> 中添加以下配置，以便 Commitizen 使用指定的适配器：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@commitlint/cz-commitlint&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="使用-commitizen" tabindex="-1">使用 Commitizen <a class="header-anchor" href="#使用-commitizen" aria-label="Permalink to &quot;使用 Commitizen&quot;">​</a></h3><p>安装和配置完成后，你可以使用以下命令来创建提交：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cz</span></span></code></pre></div><p>或者，如果你想将其作为 <code>git cz</code> 命令的别名，可以在 <code>package.json</code> 中添加一个脚本：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;git-cz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后你可以使用 <code>npm run commit</code> 来启动 Commitizen 的交互式提交界面。</p><h2 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h2><p>通过结合使用 Husky、Commitlint 和 Commitizen，我们可以在团队中强制执行一致的提交信息格式。这不仅提高了代码库的可读性，还帮助团队成员更好地理解每次提交的目的和影响。使用这些工具可以显著提高项目的质量和协作效率。此外，Husky 还可以配置其他钩子，例如 <code>pre-commit</code> 钩子，用于在提交之前运行测试或代码格式化工具。通过灵活配置，Husky 可以帮助团队在开发过程中保持高质量的代码标准。</p>`,22)]))}const g=i(e,[["render",l]]);export{r as __pageData,g as default};
