import{_ as s,c as t,aE as e,o as a}from"./chunks/framework.jiGApQmY.js";const h=JSON.parse('{"title":"Git 规范指南","description":"","frontmatter":{},"headers":[],"relativePath":"git/git规范.md","filePath":"git/git规范.md"}'),l={name:"git/git规范.md"};function o(n,i,p,r,d,c){return a(),t("div",null,i[0]||(i[0]=[e(`<h1 id="git-规范指南" tabindex="-1">Git 规范指南 <a class="header-anchor" href="#git-规范指南" aria-label="Permalink to &quot;Git 规范指南&quot;">​</a></h1><h5 id="commit-提交规范" tabindex="-1">Commit 提交规范 <a class="header-anchor" href="#commit-提交规范" aria-label="Permalink to &quot;Commit 提交规范&quot;">​</a></h5><p>Git 提交规范是一种约定，旨在使提交消息更具有可读性和一致性。以下是一种常见的 Git 提交规范示例：</p><p><strong>提交消息格式：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类型</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">范围</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主题</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主体</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">页脚</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><strong>提交消息字段解释：</strong></p><ul><li><strong>类型 (Type)：</strong> 表示本次提交的类型，常见的类型包括： <ul><li><code>feat</code>：新功能（feature）</li><li><code>fix</code>：修复问题（bug）</li><li><code>docs</code>：文档更新</li><li><code>style</code>：代码格式、样式调整，不影响代码含义的变化</li><li><code>refactor</code>：重构代码，既不修复错误也不添加功能</li><li><code>test</code>：增加或修改测试代码</li><li><code>chore</code>：构建过程或辅助工具的变动</li></ul></li><li><strong>范围 (Scope)：</strong> 可选字段，表示本次提交的影响范围，如文件名、模块名等</li><li><strong>主题 (Subject)：</strong> 简明扼要地描述本次提交的目的，一般不超过 50 个字符</li><li><strong>主体 (Body)：</strong> 详细描述本次提交的内容、原因和影响等信息</li><li><strong>页脚 (Footer)：</strong> 可选字段，包含与本次提交相关的链接、引用、问题编号等元数据</li></ul><p><strong>示例：</strong></p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user): add logout functionality</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Added a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logout button to the user dashboard for improved user experience.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Closes #</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span></code></pre></div><p><strong>注意事项：</strong></p><p>提交消息应该清晰、简明地表达本次提交的目的和内容。遵循规范有助于团队成员更容易理解提交历史，并生成更加详尽的变更日志。可以使用工具或钩子来自动验证提交消息是否符合规范。</p><p><a href="https://www.conventionalcommits.org/en/v1.0.0/" target="_blank" rel="noreferrer">Conventional Commits</a></p><h5 id="分支命名规范" tabindex="-1">分支命名规范 <a class="header-anchor" href="#分支命名规范" aria-label="Permalink to &quot;分支命名规范&quot;">​</a></h5><p>良好的分支命名规范可以提高团队协作的效率，使代码库的结构更加清晰。以下是一些常见的分支命名规范：</p><p><strong>主分支：</strong></p><ul><li><code>main</code> 或 <code>master</code>：用于发布稳定版本的分支。</li></ul><p><strong>开发分支：</strong></p><ul><li><code>develop</code>：用于整合开发人员的工作，包含最新的开发版本。</li></ul><p><strong>功能分支：</strong></p><ul><li><code>feature/&lt;功能描述&gt;</code>：用于开发新功能，功能描述可以是简短的概括。 <ul><li>例如：<code>feature/login-page</code></li></ul></li></ul><p><strong>修复分支：</strong></p><ul><li><code>bugfix/&lt;问题描述&gt;</code>：用于修复特定的 bug 或问题。 <ul><li>例如：<code>bugfix/fix-crash-issue</code></li></ul></li></ul><p><strong>发布分支：</strong></p><ul><li><code>release/&lt;版本号&gt;</code>：用于准备发布的版本，通常在发布前进行测试和准备。 <ul><li>例如：<code>release/v1.0.0</code></li></ul></li></ul><p><strong>热修复分支：</strong></p><ul><li><code>hotfix/&lt;问题描述&gt;</code>：用于紧急修复生产环境中的问题。 <ul><li>例如：<code>hotfix/fix-security-vulnerability</code></li></ul></li></ul><p><strong>其他分支：</strong></p><ul><li><code>docs/&lt;文档描述&gt;</code>：用于更新文档。</li><li><code>refactor/&lt;重构描述&gt;</code>：用于重构代码。</li><li><code>test/&lt;测试描述&gt;</code>：用于编写测试代码。</li></ul><p><strong>注意事项：</strong></p><p>分支命名应该清晰、简洁，并能够准确地描述分支的用途。避免使用过于复杂或含糊不清的命名，以免造成困惑。可以在团队中制定统一的命名规范，并通过文档或工具进行传达和强制执行。可以使用工具来自动创建和管理分支，以减少人为错误和重复工作。</p><p><strong>功能分支：</strong> <code>feature/type/xxx</code> （type：需求所属分类）</p><ul><li><strong>App 版本：</strong> <code>type = 版本号</code>，如 <code>feature/v1.1.4/cpAward</code>（注意加上 <code>v</code>）</li><li><strong>活动：</strong> <code>type = act_yyyy</code>（yyyy = 活动上线年份），如：<code>feature/act_2024/520</code></li><li><strong>其它：</strong> <code>type = yyyy.MM.dd</code>（开始日期），如：<code>feature/2024.05.20/language</code></li></ul><p><strong>修复分支：</strong> <code>hotfix/type/xxx</code></p><p>能定位问题所在 feature 的，以该 feature 名命名：<code>hotfix/2024.05.20/language</code> <code>hotfix/act_2024/520</code></p><p>其它以修复日期命名：<code>hotfix/yyyy.MM.dd</code></p>`,35)]))}const k=s(l,[["render",o]]);export{h as __pageData,k as default};
